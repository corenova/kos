module kinetic-object-stream {
  namespace "urn:ietf:params:xml:ns:yang:kinetic-object-stream";
  prefix kos;

  organization
    "Corenova Technologies, Inc.";
  contact
    "Peter K. Lee <peter@corenova.com>";
  description
    "The core module of KOS which provides custom language extensions for
     defining personas, interfaces and components as well as modeling blueprints of nodes
     and flows.";

  revision 2020-04-17 {
    description
      "Updated to support additional extensions.";
  }
  revision 2018-03-10 {
    description
      "Initial revision.";
  }
  /*
   * Custom YANG Language Extensions
   */
  extension persona {
    argument "persona-name";
    description
      "defines a processing behavior that can be instantiated by an actor node";
  }
  extension interface {
    argument "interface-name";
    description
      "defines a set of action methods that can be implemented by an actor node";
  }
  extension component {
    argument "component-name";
    description
      "defines the input/output data models that can be extended by an actor node";
  }
  extension blueprint {
    argument "blueprint-name";
    description
      "defines a collection of kinetic actor nodes and the flows between them";
  }
  extension node {
    argument "persona-node-name";
    description
      "primary data processing actor that instantiates a persona, extends a
      component, and implements interfaces";
  }
  extension instanceof {
    argument "target-persona-identifier";
    description
      "used by node to specify a persona definition";
  }
  extension implements {
    argument "target-interface-identifier";
    description
      "used by node to implement one or more interface definitions";
  }
  extension extends {
    argument "target-transform-identifier";
    description
      "used by node to extend a transform definition";
  }
  extension flow {
    argument "dataflow-name";
    description
      "describes the data connection relationship between input/output ports of
      kinetic actor nodes";
  }
  extension source {
    argument "target-node-identifier";
    description
      "source stream to read";
  }
  extension target {
    argument "target-node-identifier";
    description
      "target stream to write";
  }
  extension array {
    argument "array-name";
  }
  extension private {
    argument 'value';
    description
      "denote any arbitrary data node as being private (non-enumerable)";
  }
  /*
   * Dependencies
   */ 
  import ietf-yang-types {
    prefix yang;
  }
  /*
   * Features
   */
  feature viz {
    reference "visualization subsystem available.";
  }
  feature sim {
    reference "sumulation subsystem available.";
  }
  /*
   * Identities
   */
  identity protocol {
    description "base identity for protocols";
  }
  identity kos {
    base protocol;
  }
  identity nodejs {
    base protocol;
  }
  /*
   * Type Definitions
   */
  typedef identifier {
    type yang:yang-identifier;
  }
  typedef unique-identifier {
    type yang:uuid;
  }
  typedef flow-identifier {
    type instance-identifier {
      require-instance true;
    }
  }
  /*
   * Grouping Structure Definitions
   */
  grouping dataflow {
    leaf name {
      type kos:identifier;
    }
    leaf source {
      type kos:flow-identifier;
    }
    leaf target {
      type kos:flow-identifier;
    }
  }
  grouping reaction {
    leaf name {
      type kos:identifier;
    }
    leaf-list consumes {
      type kos:flow-identifier;
    }
    leaf-list produces {
      type kos:flow-identifier;
    }
    action activate;
  }
  grouping reaction-list {
    list reaction {
      uses kos:reaction;
    }
  }
  grouping datanode-list {
    list node {
      
    }
  }
  grouping dataflow-list {
    list flow {
      key id;
      leaf id {
        type kos:unique-identifier;
        mandatory true;
      }
      uses kos:dataflow;
    }
  }
  grouping error {
    leaf message {
      type string;
    }
    anydata origin;
  }
  /*
   * Kinetic Personas
   */
  persona connector {
    uses dataflow-list;
  }
  persona generator {
    action start;
    action stop;
    output {
      // must be implemented with data nodes
    }
  }
  persona processor {
    input {
      // must be implemented with data nodes
    }
    output {
      // must be implemented with data nodes
    }
  }
  persona terminator {
    input {
      // must be implemented with data nodes
    }
  }
  persona transformer {
    uses reaction-list;
  }
  /*
   * Operational state data nodes
   */
  container topology {
    description
      "Contains KOS network topology information.";
    uses datanode-list;
    uses dataflow-list;
  }
  notification error {
    leaf message;
    anydata origin;
  }
  notification log {
    leaf level;
    leaf message;
  }
}
